class atteblock(gluon.nn.HybridBlock):
    def __init__(self, in_channels,reduction_ratio= 2, pool_types = ['avg','max'],dimension=2):
        super(atteblock, self).__init__()

        self.dimension = dimension
        if dimension ==2:   ###为图像输入
            self.avg_pool = nn.AvgPool2D()
            self.max_pool = nn.MaxPool2D()
        elif dimension ==1:  ###为文本信息输入
            self.avg_pool = nn.AvgPool1D()
            self.max_pool = nn.MaxPool1D()
        else:
            raise RuntimeError('please check the dim of the input!')

        self.mlp= nn.HybridSequential(
        )
        self.mlp.add(nn.Dense(reduction_ratio*in_channels, activation='relu'))
        self.mlp.add(nn.Dense(in_channels,  activation='sigmoid'))
        self.pool_types = pool_types
        self.conv_layer= nn.Conv2D(in_channels,7,activation='sigmoid')


    def hybrid_forward(self, F, x, *args, **kwargs):  ##F 根据输入来决定F使用 NDArray 或 Symbol
        channel_attn_sum = None
        if self.dimension == 2:
            B, C, H, W = x.shape
        else:
            B, C, H = x.shape
        for pool_type in self.pool_types:
            if pool_type == 'avg':
                import pdb;pdb.set_trace()
                out = self.avg_pool(x)  ### 得到单层通道信息
                out = out.reshape(B, -1)
                out_raw=self.mlp(out)

            elif pool_type == 'max':
                out = self.max_pool(x)
                out = out.reshape(B, -1)
                out_raw = self.mlp(out)
            else:
                raise RuntimeError('only avg and max pooling is used here!')
            if channel_attn_sum is None:
                channel_attn_sum = out_raw
            else:
                channel_attn_sum = channel_attn_sum + out_raw
        scale = channel_attn_sum.reshape(B,C,1,1)
        channel_attn_res=x*scale
        #return channel_attn_res

        ####spatial atten
        #import pdb;pdb.set_trace()
        spatial_maxpool=self.max_pool(channel_attn_res)
        spatial_avgpool=self.avg_pool(channel_attn_res)
        spatial_all=nd.concat(spatial_maxpool,spatial_avgpool,dim=1)
        spatial_attn=self.conv_layer(spatial_all)
        spatial_attn_res=channel_attn_res*spatial_attn

        return spatial_attn_res 
